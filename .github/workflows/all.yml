name: Lint, Test, Build, Publish
on:
  push:
    branches:
      - master

    tags:
      - v*

  pull_request:

env:
  GOLANG_CI_VERSION: "1.27.0"
  APP_NAME: "k6cloudlogs"
  DOCKER_IMAGE_ID: "loadimpact/k6cloudlogs"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14.x
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Populate dependencies
        run: go mod vendor -v
      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v$GOLANG_CI_VERSION
      - name: Lint
        run: ./bin/golangci-lint run --out-format=tab ./...

  test:
    strategy:
      matrix:
        go-version: [1.14.x]
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix['go-version'] }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test
        run: GOMAXPROCS=2 go test -p 2 -race -timeout 120s -coverprofile=/tmp/code-coverage.out ./...
      - name: Generate coverage report
        run: go tool cover -html=/tmp/code-coverage.out -o /tmp/code-coverage.html
      - uses: actions/upload-artifact@v1
        with:
          name: test coverage report
          path: /tmp/code-coverage.html
      - name: Build
        run: go build .

  docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Populate dependencies #TODO: delete after vendoring
        run: go mod vendor -v
      - name: Build
        run: docker build --tag image .
      - name: Publish
        if: github.event_name != 'pull_request'
        run: |
          echo "REF=${{ github.ref }}"
          echo "DOCKER_IMAGE_ID=$DOCKER_IMAGE_ID"
          #
          # Log into registry
          echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo "$VERSION" | sed -e 's/^v//')
          echo "VERSION=$VERSION"
          docker tag image "$DOCKER_IMAGE_ID:$VERSION"
          docker push "$DOCKER_IMAGE_ID:$VERSION"
          # We also want to tag the latest stable version as latest
          if [[ "$VERSION" != "master" ]] && [[ ! "$VERSION" =~ (RC|rc) ]]; then
            docker tag image "$DOCKER_IMAGE_ID:latest"
            docker push "$DOCKER_IMAGE_ID:latest"
          fi

  release:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14.x
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Print used Go version
        run: go version
      - name: Build
        run: |
          ./build-release.sh
      - name: Upload Build
        uses: actions/upload-artifact@v1
        with:
          name: k6cloudlogs-build
          path: "dist/"
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Linux 64bit
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "dist/${{ env.APP_NAME }}-linux64.tar.gz"
          asset_name: "${{ env.APP_NAME }}-linux64.tar.gz"
          asset_content_type: application/gzip
      - name: Upload Windows 64bit
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "dist/${{ env.APP_NAME }}-win64.zip"
          asset_name: "${{ env.APP_NAME }}-win64.zip"
          asset_content_type: application/zip
      - name: Upload MacOS
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "dist/${{ env.APP_NAME }}-mac.zip"
          asset_name: "${{ env.APP_NAME }}-mac.zip"
          asset_content_type: application/zip
